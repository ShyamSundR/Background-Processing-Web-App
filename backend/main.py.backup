from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from temporalio.client import Client
import uuid
import os
from dotenv import load_dotenv
import asyncio
from typing import Optional
import httpx

# Import workflows
from workflows import ReverseWorkflow

# Load environment variables
load_dotenv()

# Pydantic models
class ReverseRequest(BaseModel):
    text: str

class ReverseResponse(BaseModel):
    task_id: str
    status: str
    original_text: str
    reversed_text: Optional[str] = None
    error: Optional[str] = None
    original_length: Optional[int] = None
    reversed_length: Optional[int] = None
    processing_time_seconds: Optional[float] = None

class SummarizeRequest(BaseModel):
    text: str
    style: str = "concise"

class SummarizeResponse(BaseModel):
    original_text: str
    summary_text: str
    style: str

# Initialize FastAPI app
app = FastAPI(
    title="Mocksi String Processing API",
    description="Background processing with Temporal + Hugging Face API",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Global state
temporal_client: Optional[Client] = None
hf_token = None
task_results = {}

@app.on_event("startup")
async def startup_event():
    """Initialize services on startup"""
    global temporal_client, hf_token
    
    # Connect to Temporal server
    try:
        temporal_host = os.getenv("TEMPORAL_HOST", "localhost")
        temporal_port = os.getenv("TEMPORAL_PORT", "7233")
        temporal_client = await Client.connect(f"{temporal_host}:{temporal_port}")
        print(f"✅ Connected to Temporal at {temporal_host}:{temporal_port}")
    except Exception as e:
        print(f"❌ Failed to connect to Temporal: {e}")
        
    # Get Hugging Face token
    hf_token = os.getenv("HUGGINGFACE_API_TOKEN")
    if hf_token:
        print("✅ Hugging Face API token configured")
        # Test the token
        try:
            await test_hf_api()
            print("✅ Hugging Face API connection verified")
        except Exception as e:
            print(f"⚠️ Hugging Face API test failed: {e}")
    else:
        print("⚠️ Hugging Face API token not found in .env")

async def test_hf_api():
    """Test Hugging Face API connection"""
    if not hf_token:
        return False
    
    api_url = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
    headers = {"Authorization": f"Bearer {hf_token}"}
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.get(api_url, headers=headers)
        return response.status_code == 200

async def call_huggingface_api(text: str, style: str) -> str:
    """Call Hugging Face API for summarization using your token"""
    if not hf_token:
        raise Exception("Hugging Face API token not configured")
    
    # Hugging Face Inference API endpoint
    api_url = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
    
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    # Set parameters based on style
    max_length = 60 if style == "concise" else 100
    min_length = 30 if style == "concise" else 60
    
    payload = {
        "inputs": text,
        "parameters": {
            "max_length": max_length,
            "min_length": min_length,
            "do_sample": False
        }
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(api_url, headers=headers, json=payload)
            
            # Handle model loading (common with free tier)
            if response.status_code == 503:
                print(" Model is loading on HF servers, waiting...")
                await asyncio.sleep(10)
                response = await client.post(api_url, headers=headers, json=payload)
            
            response.raise_for_status()
            result = response.json()
            
            if isinstance(result, list) and len(result) > 0:
                summary = result[0].get("summary_text", "")
                if summary:
                    return summary
            
            # If no good result, return original
            return text
            
    except Exception as e:
        print(f"HF API error: {e}")
        raise

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "message": "Mocksi String Processing API - Using HF API (Token-based)",
        "status": "healthy",
        "services": {
            "temporal": "connected" if temporal_client else "disconnected",
            "huggingface_api": "configured" if hf_token else "not configured"
        }
    }

@app.post("/reverse", response_model=ReverseResponse)
async def reverse_string(request: ReverseRequest):
    """Start a string reversal workflow using Temporal"""
    if not temporal_client:
        raise HTTPException(status_code=503, detail="Temporal service unavailable")
    
    if not request.text.strip():
        raise HTTPException(status_code=400, detail="Text cannot be empty")
    
    task_id = str(uuid.uuid4())
    
    try:
        # Start Temporal workflow
        handle = await temporal_client.start_workflow(
            ReverseWorkflow.run,
            request.text,
            id=task_id,
            task_queue="string-processing-queue",
        )
        
        # Store initial task state
        task_results[task_id] = {
            "task_id": task_id,
            "status": "running",
            "original_text": request.text,
            "reversed_text": None,
            "error": None,
            "original_length": len(request.text)
        }
        
        return ReverseResponse(
            task_id=task_id,
            status="running",
            original_text=request.text,
            original_length=len(request.text)
        )
        
    except Exception as e:
        print(f"Error starting reverse workflow: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to start workflow: {str(e)}")

@app.get("/reverse/{task_id}", response_model=ReverseResponse)
async def get_reverse_status(task_id: str):
    """Get the status and result of a reverse string task"""
    if not temporal_client:
        raise HTTPException(status_code=503, detail="Temporal service unavailable")
    
    try:
        handle = temporal_client.get_workflow_handle(task_id)
        
        try:
            result = await asyncio.wait_for(handle.result(), timeout=0.1)
            
            # Workflow completed successfully
            if result.get("status") == "completed":
                return ReverseResponse(
                    task_id=task_id,
                    status="completed",
                    original_text=result["original_text"],
                    reversed_text=result["reversed_text"],
                    original_length=result.get("original_length"),
                    reversed_length=result.get("reversed_length"),
                    processing_time_seconds=result.get("processing_time_seconds")
                )
            else:
                # Workflow failed
                return ReverseResponse(
                    task_id=task_id,
                    status="failed",
                    original_text=result.get("original_text", ""),
                    error=result.get("error", "Unknown error")
                )
                
        except asyncio.TimeoutError:
            # Still running
            stored_result = task_results.get(task_id, {})
            return ReverseResponse(
                task_id=task_id,
                status="running",
                original_text=stored_result.get("original_text", ""),
                original_length=stored_result.get("original_length")
            )
            
    except Exception as e:
        print(f"Error getting task status: {e}")
        stored_result = task_results.get(task_id)
        if stored_result:
            return ReverseResponse(**stored_result)
        raise HTTPException(status_code=404, detail="Task not found")

@app.post("/summarize", response_model=SummarizeResponse)
async def summarize_text(request: SummarizeRequest):
    """Summarize text using Hugging Face API (token-based)"""
    if not request.text.strip():
        raise HTTPException(status_code=400, detail="Text cannot be empty")
    
    try:
        # Use Hugging Face API with your token
        summary = await call_huggingface_api(request.text, request.style)
        
        return SummarizeResponse(
            original_text=request.text,
            summary_text=summary,
            style=request.style
        )
        
    except Exception as e:
        print(f"HF API error: {e}")
        # Fallback to simple method if API fails
        sentences = request.text.split('.')
        if len(sentences) <= 2:
            summary = request.text
        else:
            summary = f"{sentences[0].strip()}. {sentences[-2].strip()}."
        
        return SummarizeResponse(
            original_text=request.text,
            summary_text=f"[Fallback] {summary}",
            style=request.style
        )

@app.get("/health")
async def health_check():
    """Comprehensive health check for all services"""
    hf_status = "configured" if hf_token else "not configured"
    
    return {
        "app": "healthy",
        "temporal": {
            "status": "connected" if temporal_client else "disconnected",
            "host": os.getenv("TEMPORAL_HOST", "localhost"),
            "port": os.getenv("TEMPORAL_PORT", "7233")
        },
        "huggingface": {
            "status": hf_status,
            "model": "facebook/bart-large-cnn",
            "type": "api_based"
        },
        "features": {
            "string_reversal": "available" if temporal_client else "unavailable",
            "ai_summarization": "available" if hf_token else "fallback_only"
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
