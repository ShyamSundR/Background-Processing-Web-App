
# Multi-service setup adapted from Temporal documentation and FastAPI deployment guides
# Reference: https://docs.temporal.io/docs/server/quick-install/
services:
  # PostgreSQL database for Temporal server
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    image: postgres:13
    networks:
      - temporal-network
    ports:
      - 5432:5432
    volumes:
      - temporal-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Temporal server with auto-setup
  temporal:
    container_name: temporal
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:1.22.0
    networks:
      - temporal-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Temporal Web UI
  temporal-web:
    container_name: temporal-web
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    image: temporalio/web:1.15.0
    networks:
      - temporal-network
    ports:
      - 8080:8088
    restart: unless-stopped

  # FastAPI backend application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mocksi-backend
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
      - TEMPORAL_NAMESPACE=default
    env_file:
      - .env
    networks:
      - temporal-network
      - app-network
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped

  # Temporal worker process
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mocksi-worker
    depends_on:
      temporal:
        condition: service_healthy
      backend:
        condition: service_started
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
      - TEMPORAL_NAMESPACE=default
    env_file:
      - .env
    networks:
      - temporal-network
    volumes:
      - ./backend:/app
    command: ["python", "worker.py"]
    restart: unless-stopped

  # React frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: mocksi-frontend
    depends_on:
      backend:
        condition: service_started
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
    networks:
      - app-network
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume to prevent node_modules override
    stdin_open: true
    tty: true
    restart: unless-stopped

networks:
  temporal-network:
    driver: bridge
  app-network:
    driver: bridge

volumes:
  temporal-db-data:
    name: temporal-db-data